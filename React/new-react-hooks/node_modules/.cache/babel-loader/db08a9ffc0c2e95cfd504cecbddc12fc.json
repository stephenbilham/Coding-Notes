{"ast":null,"code":"var _jsxFileName = \"/Users/stephenbilham/Desktop/WebDev/new-react-features/src/components/AppNotes.js\";\nimport React, { useState, useReducer, useEffect } from \"react\";\nimport noteReducer from \"../reducers/notes\";\nimport NoteList from \"./NoteList\";\nimport AddNoteForm from \"./AddNoteForm\";\n\nconst AppNotes = () => {\n  // const [notes, setNotes] = useState([]);\n  const [notes, dispatch] = useReducer(noteReducer, []);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  const addNote = e => {\n    e.preventDefault(); // setNotes([...notes, { title, description }]);\n\n    dispatch({\n      type: \"ADD_NOTE\",\n      title,\n      description\n    });\n    setTitle(\"\");\n  };\n\n  const removeNote = title => {\n    // setNotes(notes.filter(note => note.title !== title));\n    dispatch({\n      type: \"REMOVE_NOTE\",\n      title\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"this should only be run once\");\n    const notesData = JSON.parse(localStorage.getItem(\"notez\"));\n\n    if (notesData) {\n      dispatch({\n        type: \"POPULATE_NOTES\",\n        notes: notesData\n      }); // setNotes(notesData);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"notez\", JSON.stringify(notes));\n  }, [notes]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"notes\"), /*#__PURE__*/React.createElement(NoteList, {\n    notes: notes,\n    removeNote: removeNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AddNoteForm, {\n    title: title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport { AppNotes as default };","map":{"version":3,"sources":["/Users/stephenbilham/Desktop/WebDev/new-react-features/src/components/AppNotes.js"],"names":["React","useState","useReducer","useEffect","noteReducer","NoteList","AddNoteForm","AppNotes","notes","dispatch","title","setTitle","description","setDescription","addNote","e","preventDefault","type","removeNote","console","log","notesData","JSON","parse","localStorage","getItem","setItem","stringify","default"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,UAAU,CAACE,WAAD,EAAc,EAAd,CAApC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;;AAEA,QAAMa,OAAO,GAAGC,CAAC,IAAI;AACnBA,IAAAA,CAAC,CAACC,cAAF,GADmB,CAEnB;;AACAP,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAE,UADC;AAEPP,MAAAA,KAFO;AAGPE,MAAAA;AAHO,KAAD,CAAR;AAKAD,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GATD;;AAWA,QAAMO,UAAU,GAAGR,KAAK,IAAI;AAC1B;AACAD,IAAAA,QAAQ,CAAC;AACPQ,MAAAA,IAAI,EAAE,aADC;AAEPP,MAAAA;AAFO,KAAD,CAAR;AAID,GAND;;AAQAP,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAlB;;AACA,QAAIJ,SAAJ,EAAe;AACbZ,MAAAA,QAAQ,CAAC;AACPQ,QAAAA,IAAI,EAAE,gBADC;AAEPT,QAAAA,KAAK,EAAEa;AAFA,OAAD,CAAR,CADa,CAKb;AACD;AACF,GAVQ,EAUN,EAVM,CAAT;AAYAlB,EAAAA,SAAS,CAAC,MAAM;AACdqB,IAAAA,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,SAAL,CAAenB,KAAf,CAA9B;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEA,KAAjB;AAAwB,IAAA,UAAU,EAAEU,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAER,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CAhDD;;AAkDA,SAASH,QAAQ,IAAIqB,OAArB","sourcesContent":["import React, { useState, useReducer, useEffect } from \"react\";\nimport noteReducer from \"../reducers/notes\";\nimport NoteList from \"./NoteList\";\nimport AddNoteForm from \"./AddNoteForm\";\n\nconst AppNotes = () => {\n  // const [notes, setNotes] = useState([]);\n  const [notes, dispatch] = useReducer(noteReducer, []);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n\n  const addNote = e => {\n    e.preventDefault();\n    // setNotes([...notes, { title, description }]);\n    dispatch({\n      type: \"ADD_NOTE\",\n      title,\n      description\n    });\n    setTitle(\"\");\n  };\n\n  const removeNote = title => {\n    // setNotes(notes.filter(note => note.title !== title));\n    dispatch({\n      type: \"REMOVE_NOTE\",\n      title\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"this should only be run once\");\n    const notesData = JSON.parse(localStorage.getItem(\"notez\"));\n    if (notesData) {\n      dispatch({\n        type: \"POPULATE_NOTES\",\n        notes: notesData\n      });\n      // setNotes(notesData);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"notez\", JSON.stringify(notes));\n  }, [notes]);\n\n  return (\n    <div>\n      <h1>notes</h1>\n      <NoteList notes={notes} removeNote={removeNote} />\n      <AddNoteForm title={title} />\n    </div>\n  );\n};\n\nexport { AppNotes as default };\n"]},"metadata":{},"sourceType":"module"}