{"ast":null,"code":"var _jsxFileName = \"/Users/stephenbilham/Desktop/WebDev/new-react-features/src/index.js\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst AppNotes = () => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, \"notes\"));\n}; // const App = props => {\n//   const [count, setCount] = useState(props.count);\n//   const [text, setText] = useState(\"\");\n//   return (\n//     <div>\n//       <p>\n//         hello the current {text || count} is {count}\n//       </p>\n//       <button onClick={() => setCount(count + 1)}> add one</button>\n//       <button onClick={() => setCount(count - 1)}>remove one </button>\n//       <button onClick={() => setCount(0)}>Back to 0</button>\n//       <input\n//         value={text}\n//         onChange={e => {\n//           setText(e.target.value);\n//         }}\n//       />\n//     </div>\n//   );\n// };\n// App.defaultProps = {\n//   count: 0\n// };\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(AppNotes, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }\n})), document.getElementById(\"root\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/stephenbilham/Desktop/WebDev/new-react-features/src/index.js"],"names":["React","useState","ReactDOM","serviceWorker","AppNotes","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF;AAKD,CAND,C,CAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEAF,QAAQ,CAACG,MAAT,eACE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAJ,aAAa,CAACK,UAAd","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst AppNotes = () => {\n  return (\n    <div>\n      <h1>notes</h1>\n    </div>\n  );\n};\n// const App = props => {\n//   const [count, setCount] = useState(props.count);\n//   const [text, setText] = useState(\"\");\n\n//   return (\n//     <div>\n//       <p>\n//         hello the current {text || count} is {count}\n//       </p>\n//       <button onClick={() => setCount(count + 1)}> add one</button>\n//       <button onClick={() => setCount(count - 1)}>remove one </button>\n//       <button onClick={() => setCount(0)}>Back to 0</button>\n//       <input\n//         value={text}\n//         onChange={e => {\n//           setText(e.target.value);\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// App.defaultProps = {\n//   count: 0\n// };\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppNotes />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}