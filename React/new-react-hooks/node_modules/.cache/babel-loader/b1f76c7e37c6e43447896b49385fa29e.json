{"ast":null,"code":"var _jsxFileName = \"/Users/stephenbilham/Desktop/WebDev/new-react-features/src/components/AppNotes.js\";\nimport React, { useReducer, useEffect } from \"react\";\nimport noteReducer from \"../reducers/notes\";\nimport NoteList from \"./NoteList\";\nimport AddNoteForm from \"./AddNoteForm\";\nimport NotesContext from \"../context/notes-context\";\n\nconst AppNotes = () => {\n  // const [notes, setNotes] = useState([]);\n  const [notes, dispatch] = useReducer(noteReducer, []);\n\n  const removeNote = title => {\n    // setNotes(notes.filter(note => note.title !== title));\n    dispatch({\n      type: \"REMOVE_NOTE\",\n      title\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"this should only be run once\");\n    const notesData = JSON.parse(localStorage.getItem(\"notez\"));\n\n    if (notesData) {\n      dispatch({\n        type: \"POPULATE_NOTES\",\n        notes: notesData\n      }); // setNotes(notesData);\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(\"notez\", JSON.stringify(notes));\n  }, [notes]);\n  return /*#__PURE__*/React.createElement(NotesContext.Provider, {\n    value: (notes, dispatch),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"notes\"), /*#__PURE__*/React.createElement(NoteList, {\n    notes: notes,\n    removeNote: removeNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AddNoteForm, {\n    dispatch: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport { AppNotes as default };","map":{"version":3,"sources":["/Users/stephenbilham/Desktop/WebDev/new-react-features/src/components/AppNotes.js"],"names":["React","useReducer","useEffect","noteReducer","NoteList","AddNoteForm","NotesContext","AppNotes","notes","dispatch","removeNote","title","type","console","log","notesData","JSON","parse","localStorage","getItem","setItem","stringify","default"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,UAAU,CAACE,WAAD,EAAc,EAAd,CAApC;;AAEA,QAAMO,UAAU,GAAGC,KAAK,IAAI;AAC1B;AACAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAE,aADC;AAEPD,MAAAA;AAFO,KAAD,CAAR;AAID,GAND;;AAQAT,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAlB;;AACA,QAAIJ,SAAJ,EAAe;AACbN,MAAAA,QAAQ,CAAC;AACPG,QAAAA,IAAI,EAAE,gBADC;AAEPJ,QAAAA,KAAK,EAAEO;AAFA,OAAD,CAAR,CADa,CAKb;AACD;AACF,GAVQ,EAUN,EAVM,CAAT;AAYAb,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8BJ,IAAI,CAACK,SAAL,CAAeb,KAAf,CAA9B;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,sBACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,GAAGA,KAAK,EAAEC,QAAV,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAED,KAAjB;AAAwB,IAAA,UAAU,EAAEE,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAED,QAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD,CAnCD;;AAqCA,SAASF,QAAQ,IAAIe,OAArB","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\nimport noteReducer from \"../reducers/notes\";\nimport NoteList from \"./NoteList\";\nimport AddNoteForm from \"./AddNoteForm\";\nimport NotesContext from \"../context/notes-context\";\n\nconst AppNotes = () => {\n  // const [notes, setNotes] = useState([]);\n  const [notes, dispatch] = useReducer(noteReducer, []);\n\n  const removeNote = title => {\n    // setNotes(notes.filter(note => note.title !== title));\n    dispatch({\n      type: \"REMOVE_NOTE\",\n      title\n    });\n  };\n\n  useEffect(() => {\n    console.log(\"this should only be run once\");\n    const notesData = JSON.parse(localStorage.getItem(\"notez\"));\n    if (notesData) {\n      dispatch({\n        type: \"POPULATE_NOTES\",\n        notes: notesData\n      });\n      // setNotes(notesData);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"notez\", JSON.stringify(notes));\n  }, [notes]);\n\n  return (\n    <NotesContext.Provider value={(notes, dispatch)}>\n      <h1>notes</h1>\n      <NoteList notes={notes} removeNote={removeNote} />\n      <AddNoteForm dispatch={dispatch} />\n    </NotesContext.Provider>\n  );\n};\n\nexport { AppNotes as default };\n"]},"metadata":{},"sourceType":"module"}