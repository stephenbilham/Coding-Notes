{"ast":null,"code":"var _jsxFileName = \"/Users/stephenbilham/Desktop/WebDev/new-react-features/src/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\"; // const AppNotes = () => {\n//   const notesData = JSON.parse(localStorage.getItem(\"notez\"));\n//   const [notes, setNotes] = useState(notesData || []);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const addNote = e => {\n//     e.preventDefault();\n//     setNotes([...notes, { title, description }]);\n//     setTitle(\"\");\n//   };\n//   const removeNote = title => {\n//     setNotes(notes.filter(note => note.title !== title));\n//   };\n//   useEffect(() => {\n//     localStorage.setItem(\"notez\", JSON.stringify(notes));\n//   });\n//   return (\n//     <div>\n//       <h1>notes</h1>\n//       {notes.map(note => (\n//         <div key={note.title}>\n//           <h3>{note.title}</h3>\n//           <p>{note.description}</p>\n//           <button onClick={() => removeNote(note.title)}>x</button>\n//         </div>\n//       ))}\n//       <form onSubmit={addNote}>\n//         <input value={title} onChange={e => setTitle(e.target.value)} />\n//         <textarea\n//           value={description}\n//           onChange={e => setDescription(e.target.value)}\n//         >\n//           Add info\n//         </textarea>\n//         <button>add note</button>\n//       </form>\n//     </div>\n//   );\n// };\n// const App = props => {\n//   const [count, setCount] = useState(props.count);\n//   const [text, setText] = useState(\"\");\n//   useEffect(() => {\n//     console.log(\"it ran\");\n//     document.title = count;\n//   });\n//   return (\n//     <div>\n//       <p>\n//         hello the current {text || count} is {count}\n//       </p>\n//       <button onClick={() => setCount(count + 1)}> add one</button>\n//       <button onClick={() => setCount(count - 1)}>remove one </button>\n//       <button onClick={() => setCount(0)}>Back to 0</button>\n//       <input\n//         value={text}\n//         onChange={e => {\n//           setText(e.target.value);\n//         }}\n//       />\n//     </div>\n//   );\n// };\n// App.defaultProps = {\n//   count: 0\n// };\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  count: 2,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }\n})), document.getElementById(\"root\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/stephenbilham/Desktop/WebDev/new-react-features/src/index.js"],"names":["React","useState","useEffect","ReactDOM","serviceWorker","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEAD,QAAQ,CAACE,MAAT,eACE,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,GAAD;AAAK,EAAA,KAAK,EAAE,CAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAH,aAAa,CAACI,UAAd","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// const AppNotes = () => {\n//   const notesData = JSON.parse(localStorage.getItem(\"notez\"));\n//   const [notes, setNotes] = useState(notesData || []);\n//   const [title, setTitle] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n\n//   const addNote = e => {\n//     e.preventDefault();\n//     setNotes([...notes, { title, description }]);\n//     setTitle(\"\");\n//   };\n\n//   const removeNote = title => {\n//     setNotes(notes.filter(note => note.title !== title));\n//   };\n\n//   useEffect(() => {\n//     localStorage.setItem(\"notez\", JSON.stringify(notes));\n//   });\n\n//   return (\n//     <div>\n//       <h1>notes</h1>\n//       {notes.map(note => (\n//         <div key={note.title}>\n//           <h3>{note.title}</h3>\n//           <p>{note.description}</p>\n//           <button onClick={() => removeNote(note.title)}>x</button>\n//         </div>\n//       ))}\n//       <form onSubmit={addNote}>\n//         <input value={title} onChange={e => setTitle(e.target.value)} />\n//         <textarea\n//           value={description}\n//           onChange={e => setDescription(e.target.value)}\n//         >\n//           Add info\n//         </textarea>\n\n//         <button>add note</button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// const App = props => {\n//   const [count, setCount] = useState(props.count);\n//   const [text, setText] = useState(\"\");\n\n//   useEffect(() => {\n//     console.log(\"it ran\");\n//     document.title = count;\n//   });\n\n//   return (\n//     <div>\n//       <p>\n//         hello the current {text || count} is {count}\n//       </p>\n//       <button onClick={() => setCount(count + 1)}> add one</button>\n//       <button onClick={() => setCount(count - 1)}>remove one </button>\n//       <button onClick={() => setCount(0)}>Back to 0</button>\n//       <input\n//         value={text}\n//         onChange={e => {\n//           setText(e.target.value);\n//         }}\n//       />\n//     </div>\n//   );\n// };\n\n// App.defaultProps = {\n//   count: 0\n// };\n\nReactDOM.render(\n  <React.StrictMode>\n    <App count={2} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}